import { Request, Response, Router } from "express";
import { getDB } from "../db";

const cartRoutes = Router();

cartRoutes.post("/", async (req: Request, res: Response): Promise<void> => {
  try {
    const { uuid, flightData } = req.body;
    if (!uuid || !flightData) {
      res.status(400).json({ success: false, message: "Thi·∫øu uuid ho·∫∑c flightData" });
      return;
    }

    const db = getDB();
    const cartCollection = db.collection("cart");

    // üîç Check tr√πng v√© cho c√πng user
    const existing = await cartCollection.findOne({
      uuid,
      "flightData.data.flightOffers.0.itineraries.0.segments.0.departure.at":
        flightData.data.flightOffers[0].itineraries[0].segments[0].departure.at,
      "flightData.data.flightOffers.0.itineraries.0.segments.0.arrival.at":
        flightData.data.flightOffers[0].itineraries[0].segments[0].arrival.at,
      "flightData.data.flightOffers.0.itineraries.0.segments.0.carrierCode":
        flightData.data.flightOffers[0].itineraries[0].segments[0].carrierCode,
      "flightData.data.flightOffers.0.travelerPricings.0.price.total":
        flightData.data.flightOffers[0].travelerPricings[0].price.total,
    });

    if (existing) {
      res.status(409).json({ success: false, message: "Chuy·∫øn bay ƒë√£ c√≥ trong gi·ªè h√†ng" });
      return;
    }

    await cartCollection.insertOne({ uuid, flightData, createdAt: new Date() });
    res.json({ success: true, message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "L·ªói khi th√™m v√†o gi·ªè h√†ng" });
  }
});

cartRoutes.get("/:uuid", async (req: Request, res: Response): Promise<void> => {
  try {
    const { uuid } = req.params;
    const db = getDB();
    const cartCollection = db.collection("cart");
    const items = await cartCollection.find({ uuid }).toArray();
    res.json({ success: true, data: items });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "L·ªói khi l·∫•y gi·ªè h√†ng" });
  }
});

cartRoutes.delete("/", async (req: Request, res: Response): Promise<void> => {
  try {
    const { uuid, uuid_ticket } = req.body;

    if (!uuid || !uuid_ticket) {
      res.status(400).json({
        success: false,
        message: "Thi·∫øu uuid ho·∫∑c uuid_ticket",
      });
      return;
    }

    const db = getDB();
    const cartCollection = db.collection("cart");

    // X√≥a theo ng∆∞·ªùi d√πng + m√£ v√©
    const result = await cartCollection.deleteOne({
      uuid,
      "flightData.uuid_ticket": uuid_ticket,
    });

    if (result.deletedCount === 0) {
      res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y v√© ƒë·ªÉ x√≥a",
      });
      return;
    }

    res.json({
      success: true,
      message: "ƒê√£ x√≥a v√© kh·ªèi gi·ªè h√†ng",
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a v√©:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi x√≥a v√© kh·ªèi gi·ªè h√†ng",
    });
  }
});

export default cartRoutes;
